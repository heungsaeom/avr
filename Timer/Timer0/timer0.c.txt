#include <avr/interrupt.h>
#include "timer0.h"

void init_timer0 ( uint8_t prescaler, uint8_t top ) {
	if(prescaler > 5) {DDRB &= ~(1 << PORTB0);} //if an external clock source is used, set T0 pin as input
	TCNT0 = 0;                        //clear the tcnt0 register
	OCR0A = top;                      //set the top
	TCCR0A = (1 << WGM01);            //set the mode of the timer
	TCCR0B = prescaler & 0x07;        //set the prescaler and mask bits that aren't the prescaler
}

uint8_t get_timer0 ( void ) {
	return TCNT0;                     //return the timer counter 0 register value
}

void set_timer0 ( uint8_t v ) {
	TCNT0 = v;                       //set the timer0 register
}

void reset_timer0 ( void ) {
	TCNT0 = 0;                       //set the timer0 register to 0, clearing the timer
}

void enable_interrupt_t0 ( void ) {
	TIMSK0 = (1 << TOIE0);            //set the timer overflow interrupt enable 0 bit
	sei();                            //set the global interrupt flag
}

void disable_interrupt_t0 ( void ) {
	TIMSK0 &= ~(1 << TOIE0);           //clear the timer overflow interrupt enable 0 bit
}